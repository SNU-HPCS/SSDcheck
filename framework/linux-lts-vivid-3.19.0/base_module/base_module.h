#ifndef BASE_MODULE_H
#define BASE_MODULE_H

#define DEV_ENTRY_NUM 17

#define BUFFER_TYPE_UNKNOWN 0
#define BUFFER_TYPE_SINGLE 1
#define BUFFER_TYPE_DOUBLE 2

#define BUFFER_BACKPRESSURE_MAX 1
#define PREEMPTIVE_READ_MAX 2
#define PREEMPTIVE_WRITE_MAX 2
#define EXPLICIT_FLUSHING_COUNTER_MAX 2

// total results
// for accuracy calculation
//struct total_results_t {
    //uint64_t low_hit;
    //uint64_t low_total;
    //uint64_t high_hit;
    //uint64_t high_total;
    //uint64_t all_hit;
    //uint64_t all_total;
//};


// structure size should be optimized
// device infomation
struct dev_info_t {
    // buffer feature
    uint16_t buffer_size;
    uint8_t buffer_type;
    uint8_t explicit_buffer_flushing;
    
    // allocation volume
    uint8_t bitidx_num;
    uint8_t bitidx_list[3];

    // latency thresholds
    uint64_t dram_lat_threshold;
    uint64_t normal_lat_threshold;
    uint64_t gc_lat_threshold;

    // latency overheads
    uint64_t buffer_overhead;
    uint64_t gc_overhead;
};

// FIXME
//  this engine_inf should be managed as volume. not dev
//    => minimum unit should be volume, not ssd(dev)
struct engine_info_t {
    //uint64_t predicted_latency;
    uint64_t normal_read_latency;
    uint64_t normal_write_latency;

    uint32_t debug_buffer_backpressure;
    uint32_t debug_preemptive_read;
    uint32_t debug_preemptive_write;

    //uint64_t debug_normal_read_lat;
    //uint64_t debug_normal_write_lat;

    int32_t debug_current_request_in_buffer;
    uint32_t debug_current_high_interval;
    uint64_t debug_last_high_interval;
    uint64_t debug_estimate_block_time;
};

// lba => 
struct prediction_parv_t {
    // get from user
    int devid;
    uint64_t lba;
    uint32_t data_len;
    char rw;
    int volume_idx;

    // generated by kernel
    uint64_t stime;
    
    // results
    uint64_t predicted_latency;

    // for debuging purpose (dump current engine info)
    struct engine_info_t debug_engine_info;
};
#endif
